scheduler_app/
│
├── main.py                # Entry point
├── config.py              # DB config, constants
├── db.py                  # MSSQL interactions
├── scheduler/
│   ├── __init__.py
│   ├── task.py            # Task object
│   ├── scheduler_manager.py # Main Scheduler class
│   ├── rules_loader.py    # Load scheduleRulesTable
│   └── change_detector.py # Compare snapshots (DeepDiff)
└── modules/               # Small python applications (tasks)


task class
-----------
from dataclasses import dataclass
from datetime import datetime

@dataclass
class Task:
    module_name: str
    trigger_time: str  # Could be cron string, or datetime, or custom object
    # You can extend this with other attributes like args, kwargs, priority, etc.



Rules loader
------------
import pyodbc
from scheduler.task import Task

class RulesLoader:
    def __init__(self, connection_string):
        self.conn_str = connection_string

    def load_rules(self) -> list[Task]:
        tasks = []
        with pyodbc.connect(self.conn_str) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT module_name, trigger_time FROM schedulRulesTable")
            for row in cursor.fetchall():
                tasks.append(Task(module_name=row.module_name, trigger_time=row.trigger_time))
        return tasks


schedulerManager
----------------

import schedule
import time
from deepdiff import DeepDiff
from scheduler.rules_loader import RulesLoader
from scheduler.task import Task
from typing import List

class SchedulerManager:
    def __init__(self, rules_loader: RulesLoader):
        self.rules_loader = rules_loader
        self.tasks: List[Task] = []
        self.snapshot = None

    def load_tasks(self):
        """Fetch tasks from DB and store in self.tasks"""
        self.tasks = self.rules_loader.load_rules()

    def schedule_tasks(self):
        """Schedule tasks using schedule module"""
        schedule.clear()  # Clear previous schedules
        for task in self.tasks:
            # Example: handle simple time trigger (extendable)
            schedule.every().day.at(task.trigger_time).do(self.run_module, task)

    def run_module(self, task: Task):
        """Dynamically import and run a module"""
        mod = __import__(f"modules.{task.module_name}", fromlist=[task.module_name])
        if hasattr(mod, 'main'):
            mod.main()  # Assumes each module has a main() function

    def detect_changes(self):
        """Compare current snapshot with latest DB tasks"""
        new_tasks = self.rules_loader.load_rules()
        diff = DeepDiff([t.__dict__ for t in self.tasks],
                        [t.__dict__ for t in new_tasks],
                        ignore_order=True)
        if diff:
            print("Changes detected! Reloading schedule...")
            self.tasks = new_tasks
            self.schedule_tasks()

    def run_loop(self):
        """Main loop"""
        self.load_tasks()
        self.schedule_tasks()
        while True:
            schedule.run_pending()
            time.sleep(10)
            self.detect_changes()


Main Entry point
---------------

from scheduler.rules_loader import RulesLoader
from scheduler.scheduler_manager import SchedulerManager

if __name__ == "__main__":
    conn_str = "DRIVER={ODBC Driver 18 for SQL Server};SERVER=...;DATABASE=...;UID=...;PWD=..."
    loader = RulesLoader(conn_str)
    manager = SchedulerManager(loader)
    manager.run_loop()
