import tkinter as tk
from tkinter import ttk
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class NeuralNetworkSimulator:
    def __init__(self, root):
        self.root = root
        self.root.title("Neural Network Simulator")
        
        # Define network parameters
        self.num_input_neurons = 2
        self.num_hidden_layers = 1
        self.num_neurons_per_hidden_layer = 3
        self.num_output_neurons = 1
        self.weights = {}
        self.biases = {}
        self.connections = []
        
        # UI Elements
        self.create_ui()
        
    def create_ui(self):
        # Main frame
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Control Panel
        self.control_panel = ttk.Frame(self.main_frame, padding=10)
        self.control_panel.pack(side=tk.LEFT, fill=tk.Y)
        
        # Network Configuration
        ttk.Label(self.control_panel, text="Input Neurons").pack()
        self.input_neurons_entry = ttk.Entry(self.control_panel)
        self.input_neurons_entry.insert(0, "2")
        self.input_neurons_entry.pack()
        
        ttk.Label(self.control_panel, text="Hidden Layers").pack()
        self.hidden_layers_entry = ttk.Entry(self.control_panel)
        self.hidden_layers_entry.insert(0, "1")
        self.hidden_layers_entry.pack()
        
        ttk.Label(self.control_panel, text="Neurons per Layer").pack()
        self.neurons_per_layer_entry = ttk.Entry(self.control_panel)
        self.neurons_per_layer_entry.insert(0, "3")
        self.neurons_per_layer_entry.pack()
        
        ttk.Label(self.control_panel, text="Output Neurons").pack()
        self.output_neurons_entry = ttk.Entry(self.control_panel)
        self.output_neurons_entry.insert(0, "1")
        self.output_neurons_entry.pack()
        
        ttk.Button(self.control_panel, text="Update Network", command=self.update_network).pack(pady=5)
        
        # Add "Run Network" button
        ttk.Button(self.control_panel, text="Run Network", command=self.run_network).pack(pady=5)
        
        # Frame for weights and biases
        self.weights_biases_frame = ttk.Frame(self.control_panel)
        self.weights_biases_frame.pack(fill=tk.X, pady=10)
        
        # Canvas for Neural Network
        self.network_canvas = tk.Canvas(self.main_frame, bg="white", width=600, height=400)
        self.network_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # Output Graph Panel
        self.figure, self.ax = plt.subplots(figsize=(5, 3))
        self.graph_canvas = FigureCanvasTkAgg(self.figure, master=self.main_frame)
        self.graph_canvas.get_tk_widget().pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
    
    def update_network(self):
        # Update network parameters
        self.num_input_neurons = int(self.input_neurons_entry.get())
        self.num_hidden_layers = int(self.hidden_layers_entry.get())
        self.num_neurons_per_hidden_layer = int(self.neurons_per_layer_entry.get())
        self.num_output_neurons = int(self.output_neurons_entry.get())
        
        # Clear previous weight and bias inputs
        for widget in self.weights_biases_frame.winfo_children():
            widget.destroy()
        
        # Add weight and bias inputs for hidden layers
        for layer in range(self.num_hidden_layers):
            ttk.Label(self.weights_biases_frame, text=f"Hidden Layer {layer + 1}").grid(row=layer * (self.num_neurons_per_hidden_layer + 1), column=0, columnspan=2, pady=5)
            
            for neuron in range(self.num_neurons_per_hidden_layer):
                row = layer * (self.num_neurons_per_hidden_layer + 1) + neuron + 1
                
                # Weights
                ttk.Label(self.weights_biases_frame, text=f"Neuron {neuron + 1} Weights:").grid(row=row, column=0, sticky=tk.W)
                weight_entry = ttk.Entry(self.weights_biases_frame, width=20)
                weight_entry.grid(row=row, column=1, padx=5, pady=2)
                
                # Biases
                ttk.Label(self.weights_biases_frame, text=f"Neuron {neuron + 1} Bias:").grid(row=row, column=2, sticky=tk.W)
                bias_entry = ttk.Entry(self.weights_biases_frame, width=10)
                bias_entry.grid(row=row, column=3, padx=5, pady=2)
            
            # Add a separator line between hidden layers
            if layer < self.num_hidden_layers - 1:
                ttk.Separator(self.weights_biases_frame, orient=tk.HORIZONTAL).grid(
                    row=(layer + 1) * (self.num_neurons_per_hidden_layer + 1), column=0, columnspan=4, pady=5, sticky="ew"
                )
        
        # Add weight and bias inputs for output layer
        ttk.Label(self.weights_biases_frame, text="Output Layer").grid(
            row=self.num_hidden_layers * (self.num_neurons_per_hidden_layer + 1), column=0, columnspan=2, pady=5
        )
        
        for neuron in range(self.num_output_neurons):
            row = self.num_hidden_layers * (self.num_neurons_per_hidden_layer + 1) + neuron + 1
            
            # Weights
            ttk.Label(self.weights_biases_frame, text=f"Neuron {neuron + 1} Weights:").grid(row=row, column=0, sticky=tk.W)
            weight_entry = ttk.Entry(self.weights_biases_frame, width=20)
            weight_entry.grid(row=row, column=1, padx=5, pady=2)
            
            # Biases
            ttk.Label(self.weights_biases_frame, text=f"Neuron {neuron + 1} Bias:").grid(row=row, column=2, sticky=tk.W)
            bias_entry = ttk.Entry(self.weights_biases_frame, width=10)
            bias_entry.grid(row=row, column=3, padx=5, pady=2)
        
        # Redraw network
        self.draw_network()
        
    def draw_network(self):
        self.network_canvas.delete("all")
        x_offset = 50
        y_offset = 50
        spacing = 50
        
        # Draw input neurons
        for i in range(self.num_input_neurons):
            self.network_canvas.create_oval(x_offset, y_offset + i * spacing, x_offset + 30, y_offset + 30 + i * spacing, fill="blue")
        
        # Draw hidden layers
        x_offset += 100
        for layer in range(self.num_hidden_layers):
            for neuron in range(self.num_neurons_per_hidden_layer):
                self.network_canvas.create_oval(x_offset, y_offset + neuron * spacing, x_offset + 30, y_offset + 30 + neuron * spacing, fill="green")
            x_offset += 100
        
        # Draw output neurons
        for i in range(self.num_output_neurons):
            self.network_canvas.create_oval(x_offset, y_offset + i * spacing, x_offset + 30, y_offset + 30 + i * spacing, fill="red")
    
    def run_network(self):
        # Simulate network output (example: sine wave)
        self.ax.clear()  # Clear previous plot
        x = np.linspace(-10, 10, 100)
        y = np.sin(x)  # Example output (replace with actual neural network logic)
        
        # Plot the output
        self.ax.plot(x, y, label="Output")
        self.ax.set_title("Neural Network Output")
        self.ax.set_xlabel("Input")
        self.ax.set_ylabel("Output")
        self.ax.legend()
        
        # Refresh the graph canvas
        self.graph_canvas.draw()

# Run application
root = tk.Tk()
simulator = NeuralNetworkSimulator(root)
root.mainloop()