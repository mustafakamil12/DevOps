import tkinter as tk
from tkinter import ttk, messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np

# Neural Network Simulator
class NeuralNetworkSimulator:
    def __init__(self, root):
        self.root = root
        self.root.title("Neural Network Simulator")
        self.root.geometry("1200x800")

        # Neural Network Data
        self.input_neurons = []
        self.hidden_layers = []
        self.output_neurons = []
        self.connections = []
        self.weights = {}
        self.biases = {}
        self.activation_functions = {}

        # GUI Components
        self.create_gui()

    def create_gui(self):
        # Panels
        self.network_panel = tk.Canvas(self.root, bg="white", width=400, height=600)
        self.network_panel.grid(row=0, column=0, padx=10, pady=10)

        self.graph_panel = tk.Canvas(self.root, bg="lightgray", width=400, height=600)
        self.graph_panel.grid(row=0, column=1, padx=10, pady=10)

        self.control_panel = tk.Frame(self.root, bg="lightgray", width=200, height=600)
        self.control_panel.grid(row=0, column=2, padx=10, pady=10)

        # Scrollbars
        self.network_scroll = ttk.Scrollbar(self.root, orient="vertical", command=self.network_panel.yview)
        self.network_scroll.grid(row=0, column=0, sticky="nse")
        self.network_panel.configure(yscrollcommand=self.network_scroll.set)

        self.graph_scroll = ttk.Scrollbar(self.root, orient="vertical", command=self.graph_panel.yview)
        self.graph_scroll.grid(row=0, column=1, sticky="nse")
        self.graph_panel.configure(yscrollcommand=self.graph_scroll.set)

        # Buttons
        self.add_input_button = tk.Button(self.control_panel, text="Add Input Neuron", command=self.add_input_neuron)
        self.add_input_button.pack(pady=5)

        self.add_hidden_button = tk.Button(self.control_panel, text="Add Hidden Layer", command=self.prompt_hidden_layer)
        self.add_hidden_button.pack(pady=5)

        self.add_output_button = tk.Button(self.control_panel, text="Add Output Neuron", command=self.add_output_neuron)
        self.add_output_button.pack(pady=5)

        self.run_button = tk.Button(self.control_panel, text="Run Network", command=self.run_network)
        self.run_button.pack(pady=5)

        # Graph
        self.figure, self.ax = plt.subplots()
        self.canvas = FigureCanvasTkAgg(self.figure, master=self.graph_panel)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

    def add_input_neuron(self):
        neuron_id = f"Input_{len(self.input_neurons) + 1}"
        self.input_neurons.append(neuron_id)
        self.draw_neuron(neuron_id, 50, len(self.input_neurons) * 50)

    def prompt_hidden_layer(self):
        # Create a popup window to enter the number of neurons
        self.hidden_layer_window = tk.Toplevel(self.root)
        self.hidden_layer_window.title("Add Hidden Layer")
        self.hidden_layer_window.geometry("300x100")

        tk.Label(self.hidden_layer_window, text="Number of Neurons:").pack(pady=5)
        self.neuron_count_entry = tk.Entry(self.hidden_layer_window)
        self.neuron_count_entry.pack(pady=5)

        tk.Button(self.hidden_layer_window, text="Add", command=self.add_hidden_layer).pack(pady=5)

    def add_hidden_layer(self):
        try:
            num_neurons = int(self.neuron_count_entry.get())
            if num_neurons <= 0:
                raise ValueError("Number of neurons must be positive.")
        except ValueError as e:
            messagebox.showerror("Invalid Input", str(e))
            return

        # Close the popup window
        self.hidden_layer_window.destroy()

        # Add the hidden layer
        layer_id = f"Hidden_{len(self.hidden_layers) + 1}"
        self.hidden_layers.append([f"{layer_id}_Neuron_{i+1}" for i in range(num_neurons)])
        self.draw_hidden_layer(layer_id, num_neurons)

    def draw_hidden_layer(self, layer_id, num_neurons):
        x = 200
        y_start = 50
        for i in range(num_neurons):
            neuron_id = f"{layer_id}_Neuron_{i+1}"
            self.draw_neuron(neuron_id, x, y_start + i * 50)

    def add_output_neuron(self):
        neuron_id = f"Output_{len(self.output_neurons) + 1}"
        self.output_neurons.append(neuron_id)
        self.draw_neuron(neuron_id, 350, len(self.output_neurons) * 50)

    def draw_neuron(self, neuron_id, x, y):
        self.network_panel.create_oval(x, y, x + 50, y + 50, fill="lightblue", tags=neuron_id)
        self.network_panel.create_text(x + 25, y + 25, text=neuron_id, tags=neuron_id)

    def run_network(self):
        # Simulate network output
        self.ax.clear()
        x = np.linspace(-10, 10, 100)
        y = np.sin(x)  # Example output
        self.ax.plot(x, y)
        self.canvas.draw()

# Main Application
if __name__ == "__main__":
    root = tk.Tk()
    app = NeuralNetworkSimulator(root)
    root.mainloop()