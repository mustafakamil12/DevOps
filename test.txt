import tkinter as tk
from tkinter import ttk, simpledialog, messagebox
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class NeuralNetworkSimulator:
    def __init__(self, root):
        self.root = root
        self.root.title("Neural Network Simulator")
        
        # Panels
        self.setup_panels()
        self.setup_controls()
        self.setup_graph()
        
        # Neural network elements
        self.neurons = []  # List of neuron widgets
        self.connections = []  # List of connections
        self.weights = {}  # Weights storage
        self.biases = {}  # Bias storage
        
        self.draw_initial_network()
        
    def setup_panels(self):
        self.main_frame = ttk.Frame(self.root)
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        self.canvas = tk.Canvas(self.main_frame, bg="white")
        self.canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        self.scrollbar_x = ttk.Scrollbar(self.main_frame, orient=tk.HORIZONTAL, command=self.canvas.xview)
        self.scrollbar_x.pack(side=tk.BOTTOM, fill=tk.X)
        self.scrollbar_y = ttk.Scrollbar(self.main_frame, orient=tk.VERTICAL, command=self.canvas.yview)
        self.scrollbar_y.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.canvas.configure(xscrollcommand=self.scrollbar_x.set, yscrollcommand=self.scrollbar_y.set)
        self.canvas.bind("<Configure>", lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all")))
        
        self.network_frame = ttk.Frame(self.canvas)
        self.canvas.create_window((0, 0), window=self.network_frame, anchor="nw")
        
    def setup_controls(self):
        control_frame = ttk.Frame(self.root)
        control_frame.pack(fill=tk.X)
        
        ttk.Button(control_frame, text="Add Neuron", command=self.add_neuron).pack(side=tk.LEFT)
        ttk.Button(control_frame, text="Clear Network", command=self.clear_network).pack(side=tk.LEFT)
    
    def setup_graph(self):
        self.fig, self.ax = plt.subplots()
        self.ax.set_title("Neural Network Output")
        self.graph_canvas = FigureCanvasTkAgg(self.fig, master=self.root)
        self.graph_canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
    def draw_initial_network(self):
        # Example neurons
        self.add_neuron(50, 100)
        self.add_neuron(200, 100)
        self.add_neuron(350, 100)
        
        self.connect_neurons(self.neurons[0], self.neurons[1])
        self.connect_neurons(self.neurons[1], self.neurons[2])
        
    def add_neuron(self, x=100, y=100):
        neuron = self.canvas.create_oval(x-20, y-20, x+20, y+20, fill="skyblue", tags="neuron")
        self.neurons.append(neuron)
    
    def connect_neurons(self, neuron1, neuron2):
        x1, y1, x2, y2 = self.canvas.coords(neuron1)[0], self.canvas.coords(neuron1)[1], self.canvas.coords(neuron2)[0], self.canvas.coords(neuron2)[1]
        connection = self.canvas.create_line(x1+20, y1+20, x2+20, y2+20, width=2, fill="black")
        self.connections.append(connection)
    
    def clear_network(self):
        self.canvas.delete("all")
        self.neurons.clear()
        self.connections.clear()
        self.weights.clear()
        self.biases.clear()
        
# Run the application
root = tk.Tk()
nn_simulator = NeuralNetworkSimulator(root)
root.mainloop()
